// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static Array qy2;

    /** Initializes the library. */
    function void init() {

        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = (32767 + 1);

        return;

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (-x);
        }
        else {
            return x;
        }
    }

    /** Returns 1 if bit is 1, 0 if 0 */
    function boolean bit (int x, int index) {
        return (~((x & twoToThe[index]) = 0));
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;
    
        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = (shiftedX + shiftedX);
            let j = (j + 1);

        }

        return sum;

    }
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean positive;
        var int answer;

        //Check for whether sign of solution is + or -
        if (((y < 0) & (x<0)) | ((y>0) & (x>0))) {
            let positive = true;
        }
        else {
            let positive = false;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let answer = Math.divide_recur(x, y);

        if (positive) {
            return answer;
        }
        else {
            return (-answer);
        }



    }

    function int divide_recur(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            let qy2 = 0;
            return 0;
        }

        let q = Math.divide_recur(x, (y + y));

        if ((x-qy2) < y) {
            return (q + q);
        }
        else {
            if (q = 0) {
                let qy2 = y;
            }
            else {
                let qy2 = (qy2 + y);
            }
            return ((q + q) + 1);
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int dummy;
        var int dummy2;

        let y = 0;

        let j = 7;
        
        while (j > -1) {
            let dummy = (y + twoToThe[j]);
            let dummy2 = Math.multiply(dummy, dummy);
            if (((dummy2 < x) | (dummy2 = x)) & (dummy2 > 0)) {
                let y = dummy;
            }
            let j = (j - 1);
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
