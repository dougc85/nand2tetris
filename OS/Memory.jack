// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = null;
        let heap[1] = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int pointer;
        var int current_size_idx;
        var int size_needed;
        var int current_size;

        let pointer = freeList;
        let size_needed = (size + 2);
        
        while (~(pointer = 0)) {
            let current_size_idx = (pointer + 1);
            let current_size = ram[current_size_idx];
            if ((current_size = size_needed) | (current_size > size_needed)) {
                let current_size = current_size - size_needed;
                let ram[current_size_idx] = current_size;
                let ram[(pointer + current_size + 1)] = null;
                let ram[(pointer + current_size + 2)] = size;
                return (pointer + current_size + 3);
            }
            else {
                let pointer = ram[pointer];
            }
        }

        do Screen.clearScreen();
        do Output.moveCursor(0, 0);
        do Output.printString("Heap Overflow!!!!!!!");
        do Sys.halt();

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int pointer;

        let pointer = freeList;
        while (~(ram[pointer] = null)) {
            let pointer = ram[pointer];
        }

        let ram[pointer] = (o - 2);

        return;
    }    
}
