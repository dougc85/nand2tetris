// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int temp_length;

    field Array str;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        
        if (maxLength < 1) {
            let str = Array.new(1);
        }
        else {
            let str = Array.new(maxLength);
        }

        let max = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        
        if (length < max) {
            let str[length] = c;
            let length = length + 1;
        }
        else {
            do Sys.error(2);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let str[length] = 0;
        }
        else {
            do Sys.error(3);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int d;
        var boolean neg;

        let val = 0;
        let i = 0;

        if (str[0] = 45) {
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
        }

        while (i < length) {
            let d = str[i] - 48;
            let val = (Math.multiply(val, 10) + d);
            let i = i + 1;
        }

        if (neg) {
            return (-val);
        }
        else {
            return val;
        }

    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int temp;

        let length = 0;
        let max = 7;
        let str = Array.new(7);

        let temp = Math.abs(val);

        if (val < 0) {
            let str[length] = 45;
            let length = length + 1;
        }

        do String.int2string(temp, this);

        let length = length + temp_length;

        return;
    }

    function String int2string(int val, String stri) {
        var int last_digit;
        var char c;
        var String temp;

        let last_digit = (val - Math.multiply(Math.divide(val, 10), 10));
        let c = (last_digit + 48);
        if (val < 10) {
            return stri.appendChar(c);
        }
        else {
            let temp = String.int2string(Math.divide(val, 10), stri);
            return temp.appendChar(c);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
